class Рускрипт {

  #ошибки_рускрипта = {
    не_существующая_команда: "Указана неизвестная команда: %команда%.",
    нет_содержимого: "В конструкторе класса рускрипт не передан код для компиляции.",
    не_существующий_модификатор: "Указан несуществующий модификатор: %модификатор%.",
    пустое_условие: "Указано пустое условие в блоке «Если, то».",
    большое_исполнение: "Указано более одной команды в исходе в блоке «Если, то».",
    не_поддерживаемое_значение: "Передано не поддерживаемое значение: %значение%. Текущие поддерживаемые значения: %поддерживаемые_значения%"
  };

  #команды_рускрипта = {
    переменные: {
      объявление: /^Объявить переменную (\S+)(.*)$/ui,
      чтение: /^Прочитать значение переменной (\S+)(.*)$/ui
    },
    ввод: {
      чтение: /^Прочитать ввод(.*)$/ui,
      примитивы: /^Взять значение ((Да|Нет)|(\d+)|«(.*?)»)(.*)$/ui
    },
    условие: {
      проверка: /^Если \((.*?)\), то \((.*?)\)(, иначе \((.*?)\))?$/ui
    }
  }

  #модификаторы_рускрипта = {
    записать_в_переменную: /^ ?( и)? записать в переменную (\S+)(.*)$/ui,
    вывести_на_экран: /^( и)? вывести на экран(.*)$/ui,
    вывести_в_журнал: /^( и)? вывести в журнал(.*)$/ui,
    прибавить: /^( и)? прибавить (.*?)((?=( и))(.*))?$/ui,
    умножить: /^( и)? умножить на (.*?)((?=( и))(.*))?$/ui,
    поделить: /^( и)? поделить на (.*?)((?=( и))(.*))?$/ui,
    перевести_в_число: /^( и)? перевести в число((?=( и))(.*))?$/ui,
    перевести_в_строку: /^( и)? перевести в строку((?=( и))(.*))?$/ui,
    вид_переменной: /^( и)? определить вид((?=( и))(.*))?$/ui,
    равняется_ли: /^( и)? определить равняется ли (.+?)((?=( и))(.*))?$/ui
  }

  #_временно = undefined;
  #_переменные = {};

  #поддерживаемые_значения = "Строка — «Пример», Целое число — 100, Логическое значение — Да — Нет"


  constructor(содержимое) {
    this.обработать(содержимое);
  }

  обработать(содержимое) {
    if(!содержимое || !содержимое.length) { throw this.#ошибки_рускрипта.нет_содержимого; }
    содержимое = содержимое.replace("\n", "");
    содержимое = содержимое.replace(/(\/\*(.|[^.])*?\*\/)/guim, "")
    let команды = содержимое.split(/\.\s*/g);
    команды = команды.filter(команда => команда !== "");
    if(!команды || !команды.length) { throw this.#ошибки_рускрипта.нет_содержимого; }
    команды.forEach(команда => {
      this.обработать_команду(команда)
      this.#_временно = undefined;
    });
  }

  обработать_команду(команда) {
    if(this.#команды_рускрипта.ввод.чтение.test(команда)){
      let [,модификаторы] = this.#команды_рускрипта.ввод.чтение.exec(команда);
      let ответ_пользователя = prompt();
      if(ответ_пользователя === null){
        ответ_пользователя = ""
      }
      this.#_временно = ответ_пользователя

      this.обработать_модификаторы(модификаторы)
    } else if (this.#команды_рускрипта.ввод.примитивы.test(команда)){
      let [,значение,,,,модификаторы] = this.#команды_рускрипта.ввод.примитивы.exec(команда);
      this.#_временно = this.преобразовать_значение(значение)

      this.обработать_модификаторы(модификаторы)
    } else if (this.#команды_рускрипта.переменные.объявление.test(команда)){
      let [,название_переменной,модификаторы] = this.#команды_рускрипта.переменные.объявление.exec(команда)
      this.#_переменные[название_переменной] = undefined;
      this.#_временно = undefined;

      this.обработать_модификаторы(модификаторы)
    } else if (this.#команды_рускрипта.переменные.чтение.test(команда)){
      let [,название_переменной,модификаторы] = this.#команды_рускрипта.переменные.чтение.exec(команда)
      this.#_временно = this.#_переменные[название_переменной];

      this.обработать_модификаторы(модификаторы)
    } else if (this.#команды_рускрипта.условие.проверка.test(команда)){
      let [,условие,то,,иначе] = this.#команды_рускрипта.условие.проверка.exec(команда)
      if(условие === "" || условие === undefined) {
        throw this.#ошибки_рускрипта.пустое_условие;
      }
      this.обработать_команду(условие);
      if(this.преобразовать_значение(this.#_временно)){
        if(условие.split(".").length > 1){
          throw this.#ошибки_рускрипта.большое_исполнение;
        }
        this.обработать_команду(то)
      } else {
        if(иначе !== undefined && иначе !== ""){
          if(иначе.split(".").length > 1){
            throw this.#ошибки_рускрипта.большое_исполнение;
          }
          this.обработать_команду(иначе)
        }
      }
    } else {
      throw this.#ошибки_рускрипта.не_существующая_команда.replace("%команда%", команда);
    }
  }

  преобразовать_значение(значение, преобразовать_логическое_значение = true){
    switch(this.определить_вид(значение)){
      case "«Строка»":
        return значение.slice(1,-1);

      case "«Число»":
        return Number(значение)

      case "«Логическое значение»":
        if(typeof значение == "string" && преобразовать_логическое_значение){
          return "да"==значение.toLowerCase()
        } else {
          return значение
        }
    }
  }

  определить_вид(значение){
    if(/\d+/.test(значение)){
      return "«Число»"
    } else if (/^(Да|Нет)$/.test(значение) || typeof значение === "boolean") {
      return "«Логическое значение»"
    } else if (typeof значение === "string") {
      return "«Строка»"
    } else {
      throw this.#ошибки_рускрипта.не_поддерживаемое_значение.replace("%значение%", значение).replace("%поддерживаемые_значения%", this.#поддерживаемые_значения);
    }
  }

  обработать_модификаторы(модификаторы){
    if(модификаторы === "" || модификаторы === undefined) { return; }
    let модификаторы_рускрипта = Object.keys(this.#модификаторы_рускрипта);
    let i; let found = false;
    for (i = 0; i < модификаторы_рускрипта.length; i++) {
      if(this.#модификаторы_рускрипта[модификаторы_рускрипта[i]].test(модификаторы)){
        found = true;
        break;
      }
    }
    if(!found){ throw this.#ошибки_рускрипта.не_существующий_модификатор.replace("%модификатор%", модификаторы); }

    let последующие_модификаторы;
    if(модификаторы_рускрипта[i] == "вывести_на_экран"){
      alert(this.#_временно);
    } else if (модификаторы_рускрипта[i] == "вывести_в_журнал"){
      console.log(this.#_временно);
    } else if(модификаторы_рускрипта[i] == "записать_в_переменную"){
      let [,,название_переменной] = this.#модификаторы_рускрипта[модификаторы_рускрипта[i]].exec(модификаторы)
      this.#_переменные[название_переменной] = this.#_временно;
    } else if(модификаторы_рускрипта[i] == "прибавить"){
      let [,,значение,следующие_модификаторы] = this.#модификаторы_рускрипта[модификаторы_рускрипта[i]].exec(модификаторы)
      this.#_временно += this.преобразовать_значение(значение)
      последующие_модификаторы = следующие_модификаторы;
    } else if(модификаторы_рускрипта[i] == "умножить"){
      let [,,значение,следующие_модификаторы] = this.#модификаторы_рускрипта[модификаторы_рускрипта[i]].exec(модификаторы)
      this.#_временно *= значение
      последующие_модификаторы = следующие_модификаторы;
    } else if(модификаторы_рускрипта[i] == "поделить"){
      let [,,значение,следующие_модификаторы] = this.#модификаторы_рускрипта[модификаторы_рускрипта[i]].exec(модификаторы)
      this.#_временно /= значение
      последующие_модификаторы = следующие_модификаторы;
    } else if(модификаторы_рускрипта[i] == "перевести_в_число"){
      let [,,следующие_модификаторы] = this.#модификаторы_рускрипта[модификаторы_рускрипта[i]].exec(модификаторы)
      let числовое_значение = parseInt(this.#_временно)
      if(!isNaN(числовое_значение)){
        this.#_временно = числовое_значение
      }
      последующие_модификаторы = следующие_модификаторы;
    } else if(модификаторы_рускрипта[i] == "перевести_в_строку"){
      let [,,следующие_модификаторы] = this.#модификаторы_рускрипта[модификаторы_рускрипта[i]].exec(модификаторы)
      this.#_временно = String(this.#_временно)
      последующие_модификаторы = следующие_модификаторы;
    } else if(модификаторы_рускрипта[i] == "вид_переменной"){
      let [,,следующие_модификаторы] = this.#модификаторы_рускрипта[модификаторы_рускрипта[i]].exec(модификаторы)
      this.#_временно = this.определить_вид(this.#_временно)
      последующие_модификаторы = следующие_модификаторы;
    } else if(модификаторы_рускрипта[i] == "равняется_ли"){
      let [,,предположение,следующие_модификаторы] = this.#модификаторы_рускрипта[модификаторы_рускрипта[i]].exec(модификаторы)
      let первое_сравнение = this.преобразовать_значение(this.#_временно, false);
      let второе_сравнение = this.преобразовать_значение(предположение, false);
      this.#_временно = первое_сравнение==второе_сравнение
      последующие_модификаторы = следующие_модификаторы;
    }

    this.обработать_модификаторы(последующие_модификаторы);
  }

  перевести_строковое_число_в_числовое(строковое_число) {

  }
}